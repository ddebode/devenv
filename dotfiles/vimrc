if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')

" Fancy statusline
Plug 'bling/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" Navigate files in a sidebar
Plug 'scrooloose/nerdtree'

Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'dhruvasagar/vim-zoom'
Plug 'othree/xml.vim'
Plug 'vim-scripts/vim-auto-save'
Plug 'easymotion/vim-easymotion'
Plug 'terryma/vim-expand-region'
Plug 'brooth/far.vim'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-commentary'
Plug 'dhruvasagar/vim-table-mode'
Plug 'frazrepo/vim-rainbow'
Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() } }
Plug 'neoclide/coc.nvim', {'tag': '*', 'branch': 'release'}
Plug 'xavierchow/vim-swagger-preview'
Plug 'junegunn/vim-easy-align'

" Support markdown tables
let g:table_mode_corner='|'

" List ends here. Plugins become visible to Vim after this call.
" Use PlugInstall and PlugClean to install and remove plugins
call plug#end()

" Vim tree config "
map <C-n> :NERDTreeToggle<CR>
map <C-b> :NERDTreeFind<CR>
let NERDTreeShowHidden=1

autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

let g:far#source = 'rg' 

" Basic
let mapleader = " "
set number              " show line numbers
set wrap                " wrap lines
set encoding=utf-8      " set encoding to UTF-8 (default was "latin1")
set mouse=a             " enable mouse support (might not work well on Mac OS X)
set wildmenu            " visual autocomplete for command menu
set relativenumber
set modelines=0 	" Set modelines of for security 
set autoread
colo desert

" to see the cursor in the matching bracket more easily
" hi MatchParen cterm=underline,bold ctermbg=green ctermfg=none
" Turned off matching parens
let g:loaded_matchparen=0
let g:rainbow_active = 1

" Navigate
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j 
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Copy to system clipboard with xsel
noremap <leader>p :read !xsel --clipboard --output<cr>
noremap <leader>c :w !xsel -ib<cr><cr>

" Delete to zero register
noremap <leader>d "_d<cr>
noremap dd "_dd

set statusline+=%{zoom#statusline()}

" Custom mappings
nnoremap <leader>ev :vsplit $MYVIMRC<cr>
nnoremap <leader>r :so ~/.vimrc<CR> 
nnoremap <Leader>x :1,$!xmllint -format -<CR>
nnoremap <leader>q :q<cr>
nnoremap <leader>n :nohl<cr>
nnoremap <leader>/ :Ag<cr>
nmap <leader>o o<Esc>
nmap <leader>' vi'
nmap <leader>; vi"
map <leader>a <esc>ggVG<CR>

" <leader><leader> toggles between buffers
nnoremap <leader><leader> <c-^>
"nnoremap <Tab> :bnext<CR>
"nnoremap <S-Tab> :bprevious<CR>
nnoremap <Tab> :bnext<CR>:redraw<CR>:ls<CR>
nnoremap <S-Tab> :bprevious<CR>:redraw<CR>:ls<CR>

" Find and replace
vnoremap <Leader>1 "zy :%s/<C-R>z//g
nnoremap <Leader>2 :%s///g

" move line
nnoremap <A-j> :m .+1<CR>==
nnoremap <A-k> :m .-2<CR>==
inoremap <A-j> <Esc>:m .+1<CR>==gi
inoremap <A-k> <Esc>:m .-2<CR>==gi
vnoremap <A-j> :m '>+1<CR>gv=gv
vnoremap <A-k> :m '<-2<CR>gv=gv

" Saving files
set noswapfile
let g:auto_save = 1  "Auto-save plugin: enable AutoSave on Vim startup
let g:auto_save_in_insert_mode = 0  "Auto-save plugin do not save while in insert mode
set autoread

" No comments automatically
set formatoptions-=cro

" Set clipboard to system clipboard
" On ubuntu install package vim-gtk
set clipboard=unnamed

" In visual mode paste action will not overwrite the default register
vnoremap p pgvy

" Enable hl search
set hlsearch
hi Search ctermfg=Black

" Search case insentive
set ignorecase

" Paste
set pastetoggle=<F2>

" record playback (start record with qq)
noremap Q @q

" Allow backspace to delete more than what is inserted
set backspace=indent,eol,start

" Indent
set shiftwidth=4
set autoindent
set smartindent

" Easymotion
nmap s <Plug>(easymotion-overwin-w)

" Augmenting Ag command using fzf#vim#with_preview function
"   * fzf#vim#with_preview([[options], [preview window], [toggle keys...]])
"     * For syntax-highlighting, Ruby and any of the following tools are required:
"       - Bat: https://github.com/sharkdp/bat
"       - Highlight: http://www.andre-simon.de/doku/highlight/en/highlight.php
"       - CodeRay: http://coderay.rubychan.de/
"       - Rouge: https://github.com/jneen/rouge
"
"   :Ag  - Start fzf with hidden preview window that can be enabled with "?" key
"   :Ag! - Start fzf in fullscreen and display the preview window above
command! -bang -nargs=* Ag
  \ call fzf#vim#ag(<q-args>,
  \                 <bang>0 ? fzf#vim#with_preview('up:60%')
  \                         : fzf#vim#with_preview('right:50%:hidden', '?'),
  \                 <bang>0)

" change cursor
if exists('$TMUX')
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif

" Fzf mappings
nnoremap <leader>h :History<CR>
nnoremap <leader>b :Buffers<CR>
nnoremap <leader>f :Files<CR>
nnoremap <leader>l :Lines<CR>

" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)
